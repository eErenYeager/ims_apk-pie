/*
 * Copyright (c) 2012 Qualcomm Technologies, Inc.
 * All Rights Reserved. Qualcomm Technologies Confidential and Proprietary.
 *
 */

/* IMS interface to Modem */

package ims;
option java_package = "org.codeaurora.ims";
option java_outer_classname = "ImsQmiIF";

/*
IMS QMI byte stream will have the following contents
byte[0] Length of MsgTag
byte[1.. Length of MsgTag] MsgTag 11bytes
byte[Length of MsgTag+1 ..Length of Message] Message
*/

message MsgTag {
    required fixed32 token = 1; /*generated dynamically */
    required MsgType type = 2;
    required MsgId id = 3;
    required Error error = 4;
}

enum MsgType {
        UNKNOWN = 0;
        REQUEST = 1;
        RESPONSE = 2;
        UNSOL_RESPONSE = 3;
    }

enum MsgId {
    UNKNOWN_REQ = 0;

    /**
     * MsgType: REQUEST ,MsgId: REQUEST_IMS_REGISTRATION_STATE, Error:E_UNUSED ,
     *          Message: NULL
     *
     * MsgType: RESPONSE, MsgId: REQUEST_IMS_REGISTRATION_STATE, Error:Valid errors
     *          Message: message Registration
     *
     * Description:Request current IMS registration state
     *
     * Valid errors:
     *  E_SUCCESS
     *  E_RADIO_NOT_AVAILABLE
     *  E-GENERIC_FAILURE
     */
    REQUEST_IMS_REGISTRATION_STATE = 1;

    /**
     * MsgType: REQUEST ,MsgId: REQUEST_DIAL, Error:E_UNUSED ,
     *          Message: message Dial
     *
     * MsgType: RESPONSE, MsgId: REQUEST_DIAL, Error:Valid errors
     *          Message: is NULL
     *
     * Description: Initiate voice call
     *
     * This method is never used for supplementary service codes
     *
     * Valid errors:
     *  E_SUCCESS
     *  E_RADIO_NOT_AVAILABLE
     *  GENERIC_FAILURE
     */

    REQUEST_DIAL = 2;

    /**
     * REQUEST_ANSWER
     * MsgType: REQUEST
     *
     * Answer incoming call
     *
     * Will not be called for WAITING calls.
     * REQUEST_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE will be used in this case
     * instead
     *
     * "data" is enum Calltype
     * "response" is NULL
     *
     * Valid errors:
     *  E_SUCCESS
     *  E_RADIO_NOT_AVAILABLE (radio resetting)
     *  E_GENERIC_FAILURE
     */
    REQUEST_ANSWER = 3;

    /**
     * REQUEST_HANGUP
     * MsgType: REQUEST
     *
     * Hang up a specific line (like AT+CHLD=1x)
     *
     * After this HANGUP request returns, connection will NOT
     * be active anymore in next REQUEST_GET_CURRENT_CALLS query.
     *
     * "data" is message Hangup
     *
     * "response" is NULL
     *
     * Valid errors:
     *  E_SUCCESS
     *  E_RADIO_NOT_AVAILABLE (radio resetting)
     *  E_GENERIC_FAILURE
     */
    REQUEST_HANGUP = 4;

    /**
     * REQUEST_LAST_CALL_FAIL_CAUSE
     * MsgType: REQUEST
     *
     * Requests the failure cause code for the most recently terminated call
     *
     * "data" is NULL
     * "response" is a "message CallFailCauseResponse"
     *
     * If the implementation does not have access to the exact cause codes,
     * then it should return one of the values listed in CallFailCause,
     * as the UI layer needs to distinguish these cases for tone generation or
     * error notification.
     *
     * Valid errors:
     *  E_SUCCESS
     *  E_RADIO_NOT_AVAILABLE
     *  E_GENERIC_FAILURE
     */

    REQUEST_LAST_CALL_FAIL_CAUSE = 5;

    /**
     * REQUEST_GET_CURRENT_CALLS
     * MsgType: REQUEST
     *
     * Requests current call list
     *
     * "data" is NULL
     *
     * "response" must be a "message CallList or null"
     *  null means no active calls in CallList
     *
     * Valid errors:
     *
     *  E_SUCCESS
     *  E_RADIO_NOT_AVAILABLE (radio resetting)
     *  E_GENERIC_FAILURE
     *      (request will be made again in a few hundred msec)
     */
    REQUEST_GET_CURRENT_CALLS = 6;

    /**
     * REQUEST_HANGUP_WAITING_OR_BACKGROUND
     *
     * Hang up waiting or held (like AT+CHLD=0)
     *
     * After this HANGUP request returns, the connection is NOT
     * active anymore in next REQUEST_GET_CURRENT_CALLS query.
     *
     * "data" is NULL
     * "response" is NULL
     *
     * Valid errors:
     *  E_SUCCESS
     *  E_RADIO_NOT_AVAILABLE (radio resetting)
     *  E_GENERIC_FAILURE
     */
    REQUEST_HANGUP_WAITING_OR_BACKGROUND = 7;
    REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND = 8;

    /**
     * REQUEST_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE
     * MsgType: REQUEST
     *
     * For switching calls. Also used for answering waiting call
     *
     * "data" is enum Calltype
     * "response" is NULL
     *
     * Valid errors:
     *  E_SUCCESS
     *  E_RADIO_NOT_AVAILABLE (radio resetting)
     *  E_GENERIC_FAILURE
     */
    REQUEST_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE = 9;

    /**
     * REQUEST_CONFERENCE
     * MsgType: REQUEST
     *
     * Request a conference operation for the calls that are alive
     *
     * "data" is NULL
     * "response" is message SipErrorInfo
     *
     * Valid errors:
     *  E_SUCCESS
     *  E_RADIO_NOT_AVAILABLE (radio resetting)
     *  E_GENERIC_FAILURE
     */
    REQUEST_CONFERENCE = 10;

    REQUEST_EXIT_EMERGENCY_CALLBACK_MODE =11;

    /**
     * REQUEST_EXPLICIT_CALL_TRANSFER
     * MsgType: REQUEST
     *
     * For transfering the call to a third party.
     * The call can be transferred to third party (Transfer target) by
     * passing the transfer target address (blind or assured transfer)
     * or by passing the call id of the already established call with
     * transfer target (consultative transfer).
     * In success case, the call/calls will be disconnected.
     *
     * "data" is message ExplicitCallTransfer
     * "response" is NULL
     *
     * Valid errors:
     *  E_SUCCESS
     *  E_RADIO_NOT_AVAILABLE (radio resetting)
     *  E_GENERIC_FAILURE
     */
    REQUEST_EXPLICIT_CALL_TRANSFER = 12;

    REQUEST_DTMF = 13;
    REQUEST_DTMF_START = 14;
    REQUEST_DTMF_STOP = 15;
    REQUEST_UDUB = 16;

    REQUEST_MODIFY_CALL_INITIATE = 17;
    REQUEST_MODIFY_CALL_CONFIRM = 18;

    /**
     * REQUEST_QUERY_CALL_CLIP
     * MsgType: REQUEST
     *
     * Queries the status of the CLIP supplementary service
     *
     * (for MMI code "*#30#")
     * "data" is NULL
     * "response" is "message ClipProvisionStatus"
     *
     * Valid errors:
     *  SUCCESS
     *  RADIO_NOT_AVAILABLE (radio resetting)
     *  GENERIC_FAILURE
     */
    REQUEST_QUERY_CLIP = 19;

    /**
     * REQUEST_GET_CLIR
     * MsgType: REQUEST
     *
     * Gets current CLIR status
     *
     * "data" is NULL
     * "response" must be a "message Clir"
     *
     * Valid errors:
     *  SUCCESS
     *  RADIO_NOT_AVAILABLE
     *  GENERIC_FAILURE
     */
    REQUEST_GET_CLIR = 20;

    /**
     * REQUEST_SET_CLIR
     * MsgType: REQUEST
     *
     * Sets the Clir parameter
     *
     * "data" is "message Clir"
     * "response" is NULL
     *
     * Valid errors:
     *  SUCCESS
     *  RADIO_NOT_AVAILABLE
     *  GENERIC_FAILURE
     */
    REQUEST_SET_CLIR = 21;

    /**
     * REQUEST_QUERY_CALL_FORWARD_STATUS
     * MsgType: REQUEST
     *
     * Requests the call forward settings
     *
     * "data" must be a "message CallForwardInfoList"
     *
     * "response" must be a "message CallForwardInfoList or null"
     * "response" points to an array of CallForwardInfo, one for
     * each distinct registered phone number.
     *
     * For example, if data is forwarded to +18005551212 and voice is forwarded
     * to +18005559999, then two separate CallForwardInfo should be returned
     *
     * If, however, both data and voice are forwarded to +18005551212, then
     * a single CallForwardInfo can be returned with the service class
     * set to "data + voice = 3")
     *
     * Valid errors:
     *  SUCCESS
     *  RADIO_NOT_AVAILABLE
     *  GENERIC_FAILURE
     *  NETWORK_NOT_SUPPORTED
     */
    REQUEST_QUERY_CALL_FORWARD_STATUS = 22;

    /**
     * REQUEST_SET_CALL_FORWARD_STATUS
     * MsgType: REQUEST
     *
     * Configure call forward rule
     *
     * "data" must be a "message CallForwardInfoList"
     *
     * "response" is of type "SuppSvcResponse"
     *
     * Valid errors:
     *  SUCCESS
     *  RADIO_NOT_AVAILABLE
     *  GENERIC_FAILURE
     */
    REQUEST_SET_CALL_FORWARD_STATUS = 23;

    /**
     * REQUEST_QUERY_CALL_WAITING
     * MsgType: REQUEST
     *
     * Query current call waiting state
     *
     * "data" must be a "message ServiceClass"
     *
     * "response" is a "message CallWaitingInfo"
     *
     * Valid errors:
     *  SUCCESS
     *  RADIO_NOT_AVAILABLE
     *  GENERIC_FAILURE
     *  NETWORK_NOT_SUPPORTED
     */
    REQUEST_QUERY_CALL_WAITING = 24;

    /**
     * REQUEST_SET_CALL_WAITING
     * MsgType: REQUEST
     *
     * Configure current call waiting state
     *
     * "data" is "message CallWaitingInfo"
     * "response" is of type SuppSvcResponse
     *
     * Valid errors:
     *  SUCCESS
     *  RADIO_NOT_AVAILABLE
     *  GENERIC_FAILURE
     */
    REQUEST_SET_CALL_WAITING = 25;

    /**
     * MsgType: REQUEST ,MsgId: REQUEST_IMS_REG_STATE_CHANGE, Error:E_UNUSED ,
     *          Message: message Registration
     *                   enum REGISTERED - To register IMS
     *                   enum NOT_REGISTERED - To deregister IMS
     *
     * MsgType: RESPONSE, MsgId: REQUEST_IMS_REG_STATE_CHANGE, Error:Valid errors
     *          Message: NULL
     *
     * Description:Request current IMS Registration/Deregistration
     *
     * Valid errors:
     *  E_SUCCESS
     *  E_RADIO_NOT_AVAILABLE
     *  E-GENERIC_FAILURE
     */
    REQUEST_IMS_REG_STATE_CHANGE = 26;

    /**
     * REQUEST_SET_SUPP_SVC_NOTIFICATION
     * Enables/disables supplementary service related notifications
     * from the network.
     *
     * Notifications are reported via UNSOL_SUPP_SVC_NOTIFICATION.
     *
     * "data" is int *
     * ((int *)data)[0] is == 1 for notifications enabled
     * ((int *)data)[0] is == 0 for notifications disabled
     *
     * "response" is NULL
     *
     * Valid errors:
     *  E_SUCCESS
     *  E_RADIO_NOT_AVAILABLE
     *  E_GENERIC_FAILURE
     *
     * See also: UNSOL_SUPP_SVC_NOTIFICATION.
    */
    REQUEST_SET_SUPP_SVC_NOTIFICATION = 27;

    /**
     * REQUEST_ADD_PARTICIPANT
     * MsgType: Request
     * Request to add a participant to the existing conversation
     *
     * "data" is Message Dial
     *
     * "response" is message SipErrorInfo
     *
     * Valid errors:
     *  E_SUCCESS
     *
    */
    REQUEST_ADD_PARTICIPANT = 28;

    /**
     * REQUEST_QUERY_SERVICE_STATUS
     * MsgType: Request
     * Request to get the status of IMS Services
     *
     * "data" is null
     *
     * "response" is message SrvStatusList - all services must be specified in the response
     *
     * Valid errors:
     *  E_SUCCESS
     *
    */
    REQUEST_QUERY_SERVICE_STATUS = 29;

    /**
     * REQUEST_SET_SERVICE_STATUS
     * MsgType: Request
     * Request to set the status of an IMS Service
     *
     * "data" is message Info - this is a delta notification, services not listed in the
     * request must be left untouched
     *
     * "response" is null
     *
     * Valid errors:
     *  E_SUCCESS
     *
    */
    REQUEST_SET_SERVICE_STATUS = 30;

    /**
     * REQUEST_SUPP_SVC_STATUS
     * MsgType: Request
     * Request to activate/deactivate/query the supplementary service of an IMS Service
     * This is currently being used for Call Barring, CLIP, COLP
     *
     * "data" is message SuppSvcRequest
     * "response" is of type "SuppSvcResponse"
     *
     * Valid errors:
     *  SUCCESS
     *  RADIO_NOT_AVAILABLE (radio resetting)
     *  GENERIC_FAILURE
     *
    */
    REQUEST_SUPP_SVC_STATUS = 31;

    /**
    *
    * REQUEST_DEFLECT_CALL
    * MsgType: Request
    * Request to the deflect the call to specific number mentioned by user
    * "data" is message DeflectCall
    * "response" is - null
    *
    * Valid errors:
    * All enum Error type
    *
    */
    REQUEST_DEFLECT_CALL = 32;

    /**
     * REQUEST_GET_COLR
     * MsgType: REQUEST
     *
     * Gets current COLR status
     *
     * "data" is NULL
     * "response" is "message Colr"
     *
     * Valid errors:
     *  SUCCESS
     *  RADIO_NOT_AVAILABLE
     *  GENERIC_FAILURE
     */
    REQUEST_GET_COLR = 33;

    /**
     * REQUEST_SET_COLR
     * MsgType: REQUEST
     *
     * Sets the Colr parameter
     *
     * "data" is "message Colr"
     * "response" is "message SuppSvcResponse"
     *
     * Valid errors:
     *  SUCCESS
     *  RADIO_NOT_AVAILABLE
     *  GENERIC_FAILURE
     */
    REQUEST_SET_COLR = 34;

    /**
     * REQUEST_QUERY_VT_CALL_QUALITY
     * @deprecated
     * MsgType: REQUEST
     *
     * Query current video call quality setting.
     * This is DEPRECATED. Use REQUEST_GET_IMS_CONFIG with
     * item == CONFIG_ITEM_VIDEO_QUALITY instead.
     *
     * "data" is null
     *
     * "response" is a "message VideoCallQuality"
     *
     * Valid errors:
     *  SUCCESS
     *  GENERIC_FAILURE
     */
    REQUEST_QUERY_VT_CALL_QUALITY  = 35;

    /**
     * REQUEST_SET_VT_CALL_QUALITY
     * @deprecated
     * MsgType: REQUEST
     *
     * Set setting(s). This is DEPRECATED.
     * Use REQUEST_SET_IMS_CONFIG with item ==
     * CONFIG_ITEM_VIDEO_QUALITY instead.
     *
     * "data" must be a "message VideoCallQuality"
     *
     * "response" is null
     *
     * Valid errors:
     *  SUCCESS
     *  GENERIC_FAILURE
     */
    REQUEST_SET_VT_CALL_QUALITY = 36;

    /**
     * REQUEST_HOLD
     * MsgType: REQUEST
     *
     * Set setting(s)
     *
     * "data" must be a "message Hold"
     *
     * "response" is message SipErrorInfo
     *
     * Valid errors:
     *  SUCCESS
     *  GENERIC_FAILURE
     */
    REQUEST_HOLD = 37;

    /**
     * REQUEST_RESUME
     * MsgType: REQUEST
     *
     * Set setting(s)
     *
     * "data" must be a "message Resume"
     *
     * "response" is message SipErrorInfo
     *
     * Valid errors:
     *  SUCCESS
     *  GENERIC_FAILURE
     */
    REQUEST_RESUME = 38;

    /**
     * REQUEST_SEND_UI_TTY_MODE
     * MsgType: REQUEST
     *
     * Request to set the TTY mode
     *
     * "data" is message TtyNotify
     *
     * "response" is null
     *
     * Valid errors:
     *  SUCCESS
     *  GENERIC_FAILURE
     */
    REQUEST_SEND_UI_TTY_MODE = 39;

    /**
     * REQUEST_GET_RTP_STATISTICS
     * MsgType: REQUEST
     *
     * Requests RTP statistics i.e. Packet Count
     *
     * "data" is null
     *
     * "response" is message RtpStatisticsData
     *
     * Valid errors:
     *  SUCCESS
     *  GENERIC_FAILURE
     */
    REQUEST_GET_RTP_STATISTICS = 40;

    /**
     * REQUEST_GET_RTP_ERROR_STATISTICS
     * MsgType: REQUEST
     *
     * Requests RTP error statistics i.e. Packet Error Count
     *
     * "data" is null
     *
     * "response" is message RtpStatisticsData
     *
     * Valid errors:
     *  SUCCESS
     *  GENERIC_FAILURE
     */
    REQUEST_GET_RTP_ERROR_STATISTICS = 41;

    /**
     * REQUEST_GET_WIFI_CALLING_STATUS
     * MsgType: REQUEST
     *
     * Request to get the wifi calling settings and preference.
     *
     * "data" is null
     *
     * "response" is message WifiCallingInfo
     *
     * Valid errors:
     *  SUCCESS
     *  GENERIC_FAILURE
     */
    REQUEST_GET_WIFI_CALLING_STATUS = 42;

    /**
     * REQUEST_SET_WIFI_CALLING_STATUS
     * MsgType: REQUEST
     *
     * Request to set the wifi calling settings and preference.
     *
     * "data" is message WifiCallingInfo
     *
     * "response" is null
     *
     * Valid errors:
     *  SUCCESS
     *  GENERIC_FAILURE
     */
    REQUEST_SET_WIFI_CALLING_STATUS = 43;

    /**
     * REQUEST_SET_IMS_CONFIG
     * MsgType: REQUEST
     *
     * Sets value for Ims Config item
     *
     * "data" is message ConfigMsg
     *
     * "response" is message ConfigMsg
     *
     * Valid errors:
     *  SUCCESS
     *  GENERIC_FAILURE
     */
    REQUEST_SET_IMS_CONFIG = 44;

    /**
     * REQUEST_GET_IMS_CONFIG
     * MsgType: REQUEST
     *
     * Gets Ims Config item value
     *
     * "data" is message ConfigMsg
     *
     * "response" is message ConfigMsg
     *
     * Valid errors:
     *  SUCCESS
     *  GENERIC_FAILURE
     */
    REQUEST_GET_IMS_CONFIG = 45;

    /**
     * REQUEST_SEND_GEOLOCATION_INFO
     * MsgType: REQUEST
     *
     * Send GeoLocation Address info.
     *
     * "data" is message GeoLocationInfo
     *
     * "response" is null
     *
     * Valid errors:
     *  SUCCESS
     *  GENERIC_FAILURE
     */
    REQUEST_SEND_GEOLOCATION_INFO = 46;

    /**
     * REQUEST_GET_VOWIFI_CALL_QUALITY
     * MsgType: REQUEST
     *
     * Gets VoWiFI quality for current active call
     *
     * "data" is message null
     *
     * "response" is message VoWiFiCallQuality
     *
     * Valid errors:
     *  SUCCESS
     *  GENERIC_FAILURE
     */
    REQUEST_GET_VOWIFI_CALL_QUALITY = 47;

    /**
     * REQUEST_GET_VOPS_INFO
     * MsgType: REQUEST
     *
     * Query VOPS value
     *
     * "data" is null
     *
     * "response" is VopsInfo
     * True = Voice supported on LTE
     * False = Voice not supported on LTE
     *
     * Valid errors:
     *  SUCCESS
     *  GENERIC_FAILURE
     */
    REQUEST_GET_VOPS_INFO  = 48;

    /**
     * REQUEST_GET_SSAC_INFO
     * MsgType: REQUEST
     *
     * Query SSAC value
     *
     * "data" is null
     *
     * "response" is of type SsacInfo
     *
     * Valid errors:
     *  SUCCESS
     *  GENERIC_FAILURE
     */
    REQUEST_GET_SSAC_INFO  = 49;

    /**
     * REQUEST_SET_VOLTE_PREF
     * MsgType: REQUEST
     *
     * Update VoLTE preference to lower layers
     *
     * "data" is of type VolteUserPref
     *
     * "response" is null
     *
     * Valid errors:
     *  SUCCESS
     *  GENERIC_FAILURE
     */
    REQUEST_SET_VOLTE_PREF = 50;

    /**
     * REQUEST_GET_VOLTE_PREF
     * MsgType: REQUEST
     *
     * Query VoLTE preference from lower layers
     *
     * "data" is null
     *
     * "response" is of type VolteUserPref
     *
     * Valid errors:
     *  SUCCESS
     *  GENERIC_FAILURE
     */
    REQUEST_GET_VOLTE_PREF = 51;

    /**
     * REQUEST_GET_HANDOVER_CONFIG
     * MsgType: REQUEST
     *
     * Get IMS Handover status between WWAN and WLAN
     *
     * "data" is null
     *
     * "response" is HandoverConfigMsg
     *
     * Valid errors:
     *  SUCCESS
     *  GENERIC_FAILURE
     */
    REQUEST_GET_HANDOVER_CONFIG = 52;

    /**
     * REQUEST_SET_HANDOVER_CONFIG
     * MsgType: REQUEST
     *
     * Set IMS Handover status between WWAN and WLAN
     *
     * "data" is HandoverConfigMsg
     *
     * "response" is null
     *
     * Valid errors:
     *  SUCCESS
     *  GENERIC_FAILURE
     */
    REQUEST_SET_HANDOVER_CONFIG = 53;

    UNSOL_RSP_BASE = 200;

    UNSOL_RESPONSE_CALL_STATE_CHANGED = 201;
    UNSOL_CALL_RING = 202;
    UNSOL_RINGBACK_TONE = 203;

    /**
     * UNSOL_RESPONSE_IMS_NETWORK_STATE_CHANGED
     *
     * Notification for change in ims registration state
     *
     * "response" is Registration
     */
    UNSOL_RESPONSE_IMS_NETWORK_STATE_CHANGED = 204;

    UNSOL_ENTER_EMERGENCY_CALLBACK_MODE = 205;
    UNSOL_EXIT_EMERGENCY_CALLBACK_MODE = 206;

    UNSOL_MODIFY_CALL = 207;
    UNSOL_RESPONSE_HANDOVER = 208;

    /**
     * UNSOL_REFRESH_CONF_INFO
     *
     * Notification for updated conference information
     *
     * "response" is message ConfInfo
     */
    UNSOL_REFRESH_CONF_INFO = 209;

    /**
     * UNSOL_SRV_STATUS_UPDATE
     *
     * Status of services supported on Ims network. Currently supported services are sms, volte,
     * VT but interface is extensible if more services are added in future
     *
     * "response" is message SrvStatusList
     */
    UNSOL_SRV_STATUS_UPDATE = 210;

    /**
     * UNSOL_SUPP_SVC_NOTIFICATION
     *
     * Reports supplementary service related notification from the network.
     *
     * "data" is a const SuppSvcNotification *
     *
     */
    UNSOL_SUPP_SVC_NOTIFICATION = 211;

    /**
     * UNSOL_TTY_NOTIFICATION
     *
     * Reports Text Telephone related notification from the network.
     *
     * "response" is message TtyNotify
     *
     */
    UNSOL_TTY_NOTIFICATION = 212;

    /**
     * UNSOL_RADIO_STATE_CHANGED
     *
     * Notification for radio state change
     *
     * "response" is message RadioStateChanged
     */
    UNSOL_RADIO_STATE_CHANGED = 213;

    /**
     * UNSOL_MWI
     *
     * Notification for message waiting indication
     *
     * "response" is message Mwi
     */
    UNSOL_MWI = 214;

    /**
     * UNSOL_REFRESH_VICE_INFO
     *
     * Notification for updated vice information
     *
     * "response" is message ViceInfo
     */
    UNSOL_REFRESH_VICE_INFO = 215;

    /*
     * UNSOL_REQUEST_GEOLOCATION
     *
     * Request from lower layers for GeoLocation address
     * information.
     *
     * 'request' is GeoLocationInfo
     */
    UNSOL_REQUEST_GEOLOCATION = 216;

    /*
     * UNSOL_VOWIFI_CALL_QUALITY
     *
     * Notification for VoWiFi call quality information
     *
     * "response" is message VoWiFiCallQuality
     */
    UNSOL_VOWIFI_CALL_QUALITY = 217;

    /*
     * UNSOL_VOPS_CHANGED
     *
     * Request from lower layers for Vops state change
     *
     * 'response' is VopsInfo
     */
    UNSOL_VOPS_CHANGED = 218;

    /*
     * UNSOL_SSAC_CHANGED
     *
     * Notification for SSAC state change
     *
     * 'response' is message SsacInfo
     */
    UNSOL_SSAC_CHANGED = 219;

    /*
     * UNSOL_PARTICIPANT_STATUS_INFO
     *
     * Notification for participant status information
     *
     * 'response' is message ParticipantStatusInfo
     */
    UNSOL_PARTICIPANT_STATUS_INFO = 220;
    }

    enum Error{
    E_SUCCESS = 0;
    E_RADIO_NOT_AVAILABLE = 1;     /* If radio did not start or is resetting */
    E_GENERIC_FAILURE = 2;
    E_REQUEST_NOT_SUPPORTED = 6;
    E_CANCELLED = 7;
    E_UNUSED = 16;

    E_INVALID_PARAMETER = 27;               /* Invalid parameter given in a
                                                   REQUEST_MODIFY_CALL_INITIATE */
    E_REJECTED_BY_REMOTE = 28;              /* Remote end rejected a change started by
                                                   REQUEST_MODIFY_CALL_INITIATE */
    E_IMS_DEREGISTERED = 29;
    E_NETWORK_NOT_SUPPORTED = 30;           /* request not supported by network */

    E_HOLD_RESUME_FAILED = 31;
    E_HOLD_RESUME_CANCELED = 32;
    E_REINVITE_COLLISION = 33;
    }


enum CallState{
    CALL_ACTIVE = 0;
    CALL_HOLDING = 1;
    CALL_DIALING = 2;    /* MO call only */
    CALL_ALERTING = 3;   /* MO call only */
    CALL_INCOMING = 4;   /* MT call only */
    CALL_WAITING = 5;     /* MT call only */
    CALL_END = 6;
}

enum RadioState{
    RADIO_STATE_OFF = 0;                   /* Radio explictly powered off (eg CFUN=0) */
    RADIO_STATE_UNAVAILABLE = 1;           /* Radio unavailable (eg, resetting or not booted) */
    RADIO_STATE_ON = 10;                    /* Radio is on */
}

enum CallType{
    CALL_TYPE_VOICE = 0;       /* Voice only call */
    CALL_TYPE_VT_TX = 1;       /* PS Video telephony call: one way TX video,
                                * two way audio */
    CALL_TYPE_VT_RX = 2;       /* Video telephony call: one way RX video,
                                * two way audio */
    CALL_TYPE_VT = 3;          /* Video telephony call: two way video,
                                * two way audio */
    CALL_TYPE_VT_NODIR = 4;    /* Video telephony call: no direction
                                * two way audio
                                * intermediate state in a video call till
                                * video link is setup */
    CALL_TYPE_CS_VS_TX = 5;    /* VS no lipsync augmented with CS */
    CALL_TYPE_CS_VS_RX = 6;    /* VS no lipsync augmented with CS */
    CALL_TYPE_PS_VS_TX = 7;    /* VS no lipsync with optional one way PS audio */
    CALL_TYPE_PS_VS_RX = 8;    /* VS no lipsync with optional one way PS audio */
    CALL_TYPE_UNKNOWN = 9;
    CALL_TYPE_SMS = 10;         /* SMS */
    CALL_TYPE_UT = 11;          /* This is to handel when IMS is not registered */
}

/* bitmask value for the CallSubState */
enum CallSubstate{
    CALL_SUBSTATE_NONE = 0; /* Default case */
    CALL_SUBSTATE_AUDIO_CONNECTED_SUSPENDED = 0x1; /* Indicates that call is connected but
                                                    * audio attribute is suspended */
    CALL_SUBSTATE_VIDEO_CONNECTED_SUSPENDED = 0x2; /* Indicates that call is connected but
                                                    * video attribute is suspended */
    CALL_SUBSTATE_AVP_RETRY = 0x4; /* Indicates that call is established
                                    * but media retry is needed */
    CALL_SUBSTATE_MEDIA_PAUSED = 0x8; /* Indicates that call is multitasking */
}

message CallFailCauseResponse{
    optional CallFailCause failcause = 1;
    optional bytes errorinfo = 2;         /*   DEPRECATED - Used in older versions.
                                           * - From UE for hangup scenarios, errorinfo can take
                                           *   any of the following values -
                                           * -- VOICE_REJECT_CAUSE_USER_BUSY (0x01)-User is busy
                                           * -- VOICE_REJECT_CAUSE_USER_REJECT (0x02)-User has
                                           *    rejected the call
                                           * -- VOICE_REJECT_CAUSE_LOW_BATTERY (0x03)-Call is
                                           *    rejected due to low battery
                                           * - From peer/network for disconnected call in
                                           *   GET_LAST_FAIL_CAUSE, errorinfo can take
                                           *   any of the standard SIP error codes
                                           *   .i.e.400, 404, 408, 415, 480
                                           * - Apart from above values, it can take any of the OEM
                                           *   defined values, which is transparent to
                                           *   telephony layer.
                                           */
    optional string networkErrorString = 3;/* Deprecated - see errorDetails.*/
    optional SipErrorInfo errorDetails = 4;/* SIP error details on failure */
}
enum CallFailCause {
    CALL_FAIL_UNOBTAINABLE_NUMBER = 1;
    CALL_FAIL_NORMAL = 16;
    CALL_FAIL_BUSY = 17;
    CALL_FAIL_NORMAL_UNSPECIFIED = 31;
    CALL_FAIL_CONGESTION = 34;
    CALL_FAIL_INCOMPATIBILITY_DESTINATION = 88;
    CALL_FAIL_CALL_BARRED = 240;
    CALL_FAIL_FDN_BLOCKED = 241;
    CALL_FAIL_EMERGENCY_TEMP_FAILURE = 325;
    CALL_FAIL_EMERGENCY_PERM_FAILURE = 326;
    CALL_FAIL_HO_NOT_FEASIBLE = 382; /* call was ended due to LTE to 3G/2G handover not feasible*/

    /* Codes used to end/reject a call. */
    CALL_FAIL_USER_BUSY = 501; /* User ends a call.*/
    CALL_FAIL_USER_REJECT = 502; /* User rejects incoming call.*/
    CALL_FAIL_LOW_BATTERY = 503; /* Call end/reject due to low battery.*/
    CALL_FAIL_BLACKLISTED_CALL_ID = 504; /* Call end/reject due to blacklisted caller.*/
    CALL_FAIL_CS_RETRY_REQUIRED = 505; /* Call end due to CS Fallback request from lower layers.*/

    CALL_FAIL_NETWORK_UNAVAILABLE = 1010; /* PS network is unavailable
                                       * Remote party is temporarily camped on
                                       * non PS network.
                                       * Originating / remote party lost PS
                                       * coverage during the call
                                       * UI prompts user to retry call on CS*/

    CALL_FAIL_FEATURE_UNAVAILABLE = 1011; /* User has not subscribed for this
                                       * service. UI prompts user to retry call
                                       * on CS*/

    CALL_FAIL_SIP_Error = 1012; /* Sip timeout or dialog not present Error during
                                 * call upgrade/downgrade
                                 * SIP Error code 481/408
                                 * sent by IMS stack. UI does not take
                                 * any action on this Error code.
                                 * NOTE: This enum is present for backward
                                 * compatibility. Please use the specific
                                 * SIP error codes below.*/

    CALL_FAIL_MISC = 1013;/* Error code to represent Miscellaneous call failure cases*/

    CALL_FAIL_ANSWERED_ELSEWHERE = 1014; /* MT call has ended due to a release
                                       * from the network because the call was
                                       * answered elsewhere */

    CALL_FAIL_PULL_OUT_OF_SYNC = 1015; /* Call Pull request has failed */

    CALL_FAIL_CAUSE_CALL_PULLED = 1016; /* Call ended as it was pulled elsewhere */

    CALL_FAIL_SIP_REDIRECTED = 2001; /* SIP request is redirected (Errors 3xx)*/

    CALL_FAIL_SIP_BAD_REQUEST = 2002; /* SIP Error 400 : Bad Request*/

    CALL_FAIL_SIP_FORBIDDEN = 2003; /* SIP Error 403: Forbidden*/

    CALL_FAIL_SIP_NOT_FOUND = 2004; /* SIP Error 404: Not found*/

    CALL_FAIL_SIP_NOT_SUPPORTED = 2005; /* SIP Errors
                                         * 415: Unsupported Media Type
                                         * 416: Unsupported URI Scheme
                                         * 420: Bad extension*/

    CALL_FAIL_SIP_REQUEST_TIMEOUT = 2006; /* SIP Error 408: Request Time-out*/

    CALL_FAIL_SIP_TEMPORARILY_UNAVAILABLE = 2007; /* SIP Error 480: Temporarily Unavailable*/

    CALL_FAIL_SIP_BAD_ADDRESS = 2008; /* SIP Error 484: Address Incomplete*/

    CALL_FAIL_SIP_BUSY = 2009; /* SIP Errors
                                * 486: Busy Here
                                * 600: Busy Everywhere*/

    CALL_FAIL_SIP_REQUEST_CANCELLED = 2010; /* SIP Error 487: Request Terminated*/

    CALL_FAIL_SIP_NOT_ACCEPTABLE = 2011; /* SIP Errors
                                          * 406: Not Acceptable
                                          * 488: Not Acceptable Here
                                          * 606: Session Description Not Acceptable*/

    CALL_FAIL_SIP_NOT_REACHABLE = 2012; /* SIP Errors
                                         * 410: Gone
                                         * 604: Does Not Exist Anywhere*/

    CALL_FAIL_SIP_SERVER_INTERNAL_ERROR = 2013; /* SIP Error 500: Server Internal Error*/

    CALL_FAIL_SIP_SERVER_NOT_IMPLEMENTED = 2014; /* SIP Error 501: no support for the requuest*/

    CALL_FAIL_SIP_SERVER_BAD_GATEWAY = 2015; /* SIP Error 502: Bad gateway*/

    CALL_FAIL_SIP_SERVICE_UNAVAILABLE = 2016; /* SIP Error 503: Service Unavailable*/

    CALL_FAIL_SIP_SERVER_TIMEOUT = 2017; /* SIP Error 504: Server Time-out*/

    CALL_FAIL_SIP_SERVER_VERSION_UNSUPPORTED = 2018; /* SIP Error 505: version not supported*/

    CALL_FAIL_SIP_SERVER_MESSAGE_TOOLARGE = 2019; /* SIP Error 513: message too large*/

    CALL_FAIL_SIP_SERVER_PRECONDITION_FAILURE = 2020; /* SIP Error 580: pre-condition failure*/

    CALL_FAIL_SIP_USER_REJECTED = 2021; /* SIP Error 603: Decline*/

    CALL_FAIL_SIP_GLOBAL_ERROR = 2022; /* Unspecified SIP Error*/

    CALL_FAIL_MEDIA_INIT_FAILED = 3001; /* Media resource initialization failed.*/

    CALL_FAIL_MEDIA_NO_DATA = 3002; /* RTP Timeout. No audio/video traffic in session.*/

    CALL_FAIL_MEDIA_NOT_ACCEPTABLE = 3003; /* Media not supported.*/

    CALL_FAIL_MEDIA_UNSPECIFIED_ERROR = 3004; /* Unspecified Media Error*/

    CALL_FAIL_HOLD_RESUME_FAILED = 3005; /* Resume failed */

    CALL_FAIL_HOLD_RESUME_CANCELED = 3006; /* Resume canceled */

    CALL_FAIL_HOLD_REINVITE_COLLISION = 3007; /* Reinvite collision */

    CALL_FAIL_ERROR_UNSPECIFIED = 0xffff;
}


enum CallDomain{
    CALL_DOMAIN_UNKNOWN = 0;   /* Unknown domain. Sent by RIL when modem
                                    * has not yet selected a
                                    * domain for a call */
    CALL_DOMAIN_CS = 1;        /* Circuit switched domain */
    CALL_DOMAIN_PS = 2;        /* Packet switched domain */
    CALL_DOMAIN_AUTOMATIC = 3; /* Automatic domain. Sent by Android to
                                    * indicate that the domain
                                    * for a new call should be selected by modem */
    CALL_DOMAIN_NOT_SET = 4;
}

/* Will be deprecated when RIL Changes are ready to use CallType instead */
enum SrvType {
    SMS = 1;
    VOIP = 2;
    VT = 3;
}

enum StatusType {
    STATUS_DISABLED = 0;
    STATUS_PARTIALLY_ENABLED = 1;
    STATUS_ENABLED = 2;
    STATUS_NOT_SUPPORTED = 3; /* Example no modem support for IMS */
}

enum RadioTechType {
    RADIO_TECH_ANY = -1;      /* Network type can be any, used when a specific service setting
                                 * is applicable for all access technologies, example: disable
                                 * VOLTE on all access technology - When multiple network types
                                 * are listed then ANY takes priority */
    RADIO_TECH_UNKNOWN = 0;   /* Network type is unknown */
    RADIO_TECH_GPRS = 1;      /* Network type is GPRS */
    RADIO_TECH_EDGE = 2;      /* Network type is EDGE */
    RADIO_TECH_UMTS = 3;      /* Network type is UMTS */
    RADIO_TECH_IS95A = 4;     /* Network type is IS95A */
    RADIO_TECH_IS95B = 5;     /* Network type is IS95B */
    RADIO_TECH_1xRTT = 6;     /* Network type is 1xRTT*/
    RADIO_TECH_EVDO_0 = 7;    /* Network type is EVDO revision 0*/
    RADIO_TECH_EVDO_A = 8;    /* Network type is EVDO revision A*/
    RADIO_TECH_HSDPA = 9;     /* Network type is HSDPA */
    RADIO_TECH_HSUPA = 10;     /* Network type is HSUPA */
    RADIO_TECH_HSPA = 11;     /* Network type is HSPA */
    RADIO_TECH_EVDO_B = 12;   /* Network type is EVDO revision B*/
    RADIO_TECH_EHRPD = 13;    /* Network type is eHRPD */
    RADIO_TECH_LTE = 14;      /* Network type is LTE */
    RADIO_TECH_HSPAP = 15;    /* Network type is HSPA+ */
    RADIO_TECH_GSM = 16;      /* Network type is GSM */
    RADIO_TECH_TD_SCDMA = 17; /* Network type is TD_SCDMA */
    RADIO_TECH_WIFI = 18;     /* Network type is WIFI */
    RADIO_TECH_IWLAN = 19;     /* Network type is IWLAN */
}

message StatusForAccessTech{
    optional RadioTechType networkMode = 1;
    optional StatusType status = 2; /* Status takes precedence over registered i.e if due to a
                                     * error scenario status is disabled but registered says IMS
                                     * registered then the feature is treated disabled */
    optional fixed32 restrictionCause = 3;
    optional Registration registered = 4; /* Registered is applicable only to Query request and
                                           * and not Set. Field is valid only for status values of
                                           * Enabled or Partially Enabled - n/a for other
                                           * values of status */
}

message Info {
    optional bool isValid = 1;    /* If false then ignore rest of the members */
    optional SrvType type = 2;  /* Type of Service the update is for - this will be
                                 * deprecated when RIL makes their change to use
                                 * CallType instead of SrvType */
    optional CallType callType = 3;  /* Type of Call the update is for */
    optional StatusType status = 4; /* Status of the Service being updated - to be deprecated */
    optional bytes userdata = 5; /* Any additional data for future use */
    optional fixed32 restrictCause = 6; /* Restriction cause for capability - to be deprecated */
    repeated StatusForAccessTech accTechStatus = 7; /* Status of Service per access tech */
}

message SrvStatusList {
    repeated Info SrvStatusInfo = 2;
}

enum CauseCodes {
    /* Cause code unspecified from lower layers */
    CAUSE_CODE_UNSPECIFIED = 0;

    /* Call upgraded on request from the remote end */
    CAUSE_CODE_SESSION_MODIFY_UPGRADE_LOCAL_REQ  = 1;

     /* Call upgraded on request from the remote end */
    CAUSE_CODE_SESSION_MODIFY_UPGRADE_REMOTE_REQ = 2;

    /* Call downgraded on request from the local user */
    CAUSE_CODE_SESSION_MODIFY_DOWNGRADE_LOCAL_REQ = 3;

    /* Call downgraded on request from the remote end */
    CAUSE_CODE_SESSION_MODIFY_DOWNGRADE_REMOTE_REQ = 4;

    /* Call downgraded due to RTP/RTCP Timeout for Video stream*/
    CAUSE_CODE_SESSION_MODIFY_DOWNGRADE_RTP_TIMEOUT = 5;

    /* Call downgraded due to QOS for Video stream*/
    CAUSE_CODE_SESSION_MODIFY_DOWNGRADE_QOS = 6;

    /* Call downgraded due to PACKET LOSS for Video stream*/
    CAUSE_CODE_SESSION_MODIFY_DOWNGRADE_PACKET_LOSS = 7;

    /* Call downgraded due to LOW THRPT for Video stream*/
    CAUSE_CODE_SESSION_MODIFY_DOWNGRADE_LOW_THRPUT = 8;

    /* Call downgraded due to Thermal Mitigation*/
    CAUSE_CODE_SESSION_MODIFY_DOWNGRADE_THERM_MITIGATION = 9;

    /* Call downgraded due to Lip-sync */
    CAUSE_CODE_SESSION_MODIFY_DOWNGRADE_LIPSYNC = 10;

    /* Generic error for future purpose*/
    CAUSE_CODE_SESSION_MODIFY_DOWNGRADE_GENERIC_ERROR = 11;
}

message CallDetails {
    optional CallType   callType = 1;   /* Initial call type to use */
    optional CallDomain callDomain = 2; /* Call domain to place the call on.
                                 * Modem is expected to respect
                                 * the selected call domain.
                                 * When domain is AUTOMATIC, modem will
                                 * select the best available domain */
    optional fixed32 extrasLength = 3 [default = 0];           /* The number of elements in the extra field */
    repeated string extras = 4 ;        /* A list of additional call attributes,
                                 * each char * being a key-value pair.
                                 * The format should be
                                 * <namespace>:<param-name>=<value>
                                   e.g. vt:picture-size=320x240 */
    optional SrvStatusList localAbility = 5;   /* Local capability for this call - used only as
                                                * part of GET_CURRENT_CALLS */
    optional SrvStatusList peerAbility = 6;    /* Peer capability for this call - used only as
                                                * part of GET_CURRENT_CALLS */
    optional CallSubstate  callSubstate = 7;   /* Substate of the call */
    optional sfixed32  mediaId = 8 [default = -1]; /* Unique id. Used by VT to map
                                                    * media events to the  connection objects
                                                    */
    optional CauseCodes causeCode = 9; /* Cause code describing the change in CallDetails. */
}

message CallModify {

    optional fixed32 callIndex = 2;
    optional CallDetails callDetails = 3;
    optional Error error = 4;   /* This field is used for
                                 * unsolicited messages only. QMI RIL sets
                                 * it to E_CANCEL to notify that the
                                 * previous CallModify request timed out.
                                 * e.g. vt:picture-size=320x240 */
}

message CallList {
    message Call {
        optional CallState  state = 1;
        optional fixed32    index = 2;              /* Connection Index for use with, eg, AT+CHLD */
        optional fixed32    toa = 3;                /* type of address, eg 145 = intl */
        optional bool       isMpty = 4;             /* nonzero if is mpty call */
        optional bool       isMT = 5;               /* nonzero if call is mobile terminated */
        optional fixed32    als = 6;                /* ALS line indicator if available
                                                     (0 = line 1) */
        optional bool       isVoice = 7;            /* nonzero if this is is a voice call */
        optional bool       isVoicePrivacy = 8;     /* nonzero if CDMA voice privacy mode is active */
        optional string     number = 9;             /* Remote party number */
        optional fixed32    numberPresentation = 10;/* 0=Allowed, 1=Restricted, 2=Not Specified/Unknown 3=Payphone */
        optional string     name =11;               /* Remote party name */
        optional fixed32    namePresentation = 12;  /* 0=Allowed, 1=Restricted, 2=Not Specified/Unknown 3=Payphone */
        optional CallDetails  callDetails = 13;     /* current call detail */
        optional CallFailCauseResponse failCause = 14;
        optional bool       isEncrypted = 15;
        optional bool       isCalledPartyRinging = 16; /* True: If called party is being alerted and
                                                          ringing. */
        optional string     historyInfo = 17;       /* History Info. associated with the call. */
    }
    repeated Call callAttributes = 2 ;
}

enum IpPresentation{
    IP_PRESENTATION_NUM_ALLOWED = 0x0;    /* Presentation of IP Allowed */
    IP_PRESENTATION_NUM_RESTRICTED = 0x1; /* Presentation of IP Restricted */
    IP_PRESENTATION_NUM_DEFAULT = 0x2;    /* Presentation default. Network value
                                           * will be considered in this case.
                                           */
}

message Colr {
    optional IpPresentation presentation = 1;
    optional SipErrorInfo errorDetails = 2; /* SIP error details on failure */
}

message Dial {
    optional string address = 1;
    optional fixed32 clir = 2;
            /* (same as 'n' paremeter in TS 27.007 7.7 "+CLIR"
             * clir == 0 on "use subscription default value"
             * clir == 1 on "CLIR invocation" (restrict CLI presentation)
             * clir == 2 on "CLIR suppression" (allow CLI presentation)
             */
    optional CallDetails  callDetails = 3; /* current call detail */
    optional IpPresentation presentation = 4; /* IP Presentation detail */
    optional bool isConferenceUri = 5; /* set to true only if initiating conference uri,
                                        * field not set for other dial requests */
    optional bool isCallPull = 6; /* set to true only call needs to be pulled
                                   * from another device */
    optional bool isEncrypted = 7; /* set to true when user requests encrypted calling */
}

message Hangup {
    optional fixed32 conn_index  = 1; /* Valid if multiparty is false else -1  */
    optional bool multi_party    = 2; /* Is Hangup for a multiparty call */
    optional string  conn_uri    = 3; /* Valid if multiparty is true, else null */
    optional fixed32 conf_id     = 4; /* Conference ID if more than 1 conference call */
    optional CallFailCauseResponse failCauseResponse = 5; /* Fail cause response */
}

message DeflectCall {
    optional fixed32 conn_index  = 1; /* Connection id to be deflected*/
    optional string  number      = 2; /* connection would be deflected to this number */
}

message Clir {
    optional fixed32 param_m = 1;
    optional fixed32 param_n = 2;
}

message Answer {
    optional CallType call_type = 1;
    optional IpPresentation presentation = 4; /* IP Presentation detail */
}

message SwitchWaitingOrHoldingAndActive {
    optional CallType call_type = 1;
}

message Mute {
    optional bool mute_flag = 1;
}


message Dtmf {
    optional string dtmf = 1;
}

//Reuse the registration message for IMS Registration/Deregistration
message Registration {
    enum RegState{
        REGISTERED = 1;
        NOT_REGISTERED = 2;
        REGISTERING = 3;
    }
    optional RegState state = 1;
    optional fixed32 errorCode = 2; /* Returned when the state is NOT_REGISTERED
                                        Values:
                                          - 3xx -- Redirection
                                          - 4xx -- Client failure
                                          - 5xx -- Server failure
                                          - 6xx -- Global failure */
    optional string errorMessage = 3; /* String associated with the error code */
    optional RadioTechType radioTech = 4;
    optional string pAssociatedUris = 5; /* List of semi-colon-separated URI(s)
                                       for self-identity. */
}

message RingBackTone {
    enum ToneFlag {
        STOP = 0;
        START = 1;
    }
    optional ToneFlag flag = 1;
}

message IFConnected{
    enum Version {
        VERSION_0 = 0;
    }
    optional Version if_version = 1;
}

message LastFailCause{
    optional CallFailCause cause = 1;
}

enum Handover_Msg_Type{
    START = 0;            /* Handover triggered */
    COMPLETE_SUCCESS = 1; /* Handover completed successfully */
    COMPLETE_FAIL = 2;    /* Handover failed */
    CANCEL = 3;           /* Handover cancelled */
    NOT_TRIGGERED = 4;    /* Handover not triggered */
}

enum Extra_Type{
    LTE_TO_IWLAN_HO_FAIL = 1; /* Handover from LTE to IWLAN failed */
}

message Extra{
    optional Extra_Type type = 1; /* Type of Extra */
    optional bytes extraInfo = 2; /* Additional Information associated with this extra type */
}

message Handover{
    optional Handover_Msg_Type type = 1;
    optional RadioTechType srcTech = 2; /* Source Radio Tech */
    optional RadioTechType targetTech = 3; /* Target Radio Tech */
    optional Extra hoExtra = 4; /* Extra information about this handover */
    optional string errorCode = 5; /* Handover Error Code, if any */
    optional string errorMessage = 6; /* Handover Error Decscription, if any */
}

enum Tty_Mode_Type{
    TTY_MODE_OFF = 0;
    TTY_MODE_FULL = 1;
    TTY_MODE_HCO = 2;
    TTY_MODE_VCO = 3;
}

message TtyNotify{
    optional Tty_Mode_Type mode = 1; /* Tty Mode */
    optional bytes userData = 2; /* Additional user data related to this notification for future */
}

message RadioStateChanged{
    optional RadioState state = 1;
}

enum ClipStatus {
    NOT_PROVISIONED = 0;
    PROVISIONED = 1;
    STATUS_UNKNOWN = 2;
}

message ClipProvisionStatus{
    optional ClipStatus clip_status = 1;
    optional SipErrorInfo errorDetails = 2; /* SIP error details on failure */
}

message ServiceClass{
    optional fixed32 service_Class = 1;  /*  TS 27.007 service class to query
                                          *  1 = voice
                                          *  2 = data
                                          *  4 = fax
                                          *  8 = sms
                                          *  16 = data sync
                                          *  32 = data async
                                          *  64 = packet
                                          *  128 = PAD
                                          */
}

enum ServiceClassStatus{
    DISABLED = 0;
    ENABLED = 1;
}

message CbNumList {
    optional ServiceClassStatus status = 1;
    optional string number = 2;
}

message CbNumListType {
    optional ServiceClass serviceClass = 1; /* only voice class i.e 1 is supported */
    repeated CbNumList cb_num_list = 2; /* every element in CbNumList corresponds to
                                         * each serviceClass
                                         */
}

message CallWaitingInfo{
    optional ServiceClassStatus service_status = 1;
    optional ServiceClass       service_class  = 2; /*  TS 27.007 service class to query */
    optional SipErrorInfo errorDetails = 3; /* SIP error details on failure */
}

message CallForwardInfoList{
    message CallForwardInfo{
        optional fixed32 status = 1;/*
                                     * For RIL_REQUEST_QUERY_CALL_FORWARD_STATUS
                                     * status 1 = active, 0 = not active
                                     *
                                     * For RIL_REQUEST_SET_CALL_FORWARD:
                                     * status is:
                                     * 0 = disable
                                     * 1 = enable
                                     * 2 = interrogate
                                     * 3 = registeration
                                     * 4 = erasure
                                     */
        optional fixed32 reason = 2;      /* from TS 27.007 7.11 "reason" */
        optional fixed32 service_class = 3;/* From 27.007 +CCFC/+CLCK "class"
                                             See table for Android mapping from
                                             MMI service code
                                             0 means user doesn't input class */
        optional fixed32 toa = 4;         /* "type" from TS 27.007 7.11 */
        optional string  number = 5;      /* "number" from TS 27.007 7.11. May be NULL */
        optional fixed32 time_seconds = 6; /* for CF no reply only */
        optional CallFwdTimerInfo callFwdTimerStart = 7; /* StartTime is time at which
                                                            CallForward Timer starts.*/
        optional CallFwdTimerInfo callFwdTimerEnd = 8; /* EndTime is time at which
                                                          CallForward Timer ends.*/
    }
    repeated CallForwardInfo info = 2;
    optional SipErrorInfo errorDetails = 3; /* SIP error details on failure */
}

message CallFwdTimerInfo{
    optional fixed32 year = 1;
    optional fixed32 month = 2; /*
                                 * Range: 1 to 12
                                 * 1 for January and 12 for December
                                 */
    optional fixed32 day = 3; /* Range: 1 to 31 */
    optional fixed32 hour = 4; /* Range: 0 to 23 */
    optional fixed32 minute = 5; /* Range: 0 to 59 */
    optional fixed32 second = 6; /* Range: 0 to 59 */
    optional fixed32 timezone = 7; /*
                                    * Offset from Universal time, i.e., the difference
                                    * between local time and Universal time
                                    * in increments of 15 min
                                    */
}

message ConfInfo{
    optional bytes conf_info_uri = 1;
    optional ConfCallState confCallState = 2; /* Call state ConfCallState*/
}

enum ConfCallState {
    RINGING = 0;
    FOREGROUND = 1;
    BACKGROUND = 2;
}

message SuppSvcNotification{
    optional NotificationType notificationType = 1;
                                           /*
                                            * 0 = MO intermediate result code
                                            * 1 = MT unsolicited result code
                                            */
    optional fixed32 code = 2;
    optional fixed32 index = 3;            /* CUG index - not used currently */
    optional fixed32 type = 4;             /* "type" (MT only).- not used currently */
    optional string  number = 5;           /* "number"
                                              (MT only, may be NULL). - not used currently*/
    optional fixed32 connId = 6;            /* connection id */
    optional string history_info = 7;      /* Received for MO scenarios.
                                            * Contains list of forwarded numbers when call forward
                                            * is set on MT side. The numbers in the list are
                                            * separated with "\n\r" characters.
                                            */
    optional bool hold_tone = 8;           /* Local hold tone information.
                                            * Valid values:
                                            *   true  - UE to play hold tone
                                            *   false - Network to play hold tone
                                            */
}

enum NotificationType {
    MO = 0;
    MT = 1;
}

message SuppSvcStatus{
    optional ServiceClassStatus status = 1;
}

enum SuppSvcOperationType {
    ACTIVATE = 1;
    DEACTIVATE = 2;
    QUERY = 3;
    REGISTER = 4;
    ERASURE = 5;
}

enum SuppSvcFacilityType {
    FACILITY_CLIP = 1;    /* Calling Line Identification Presentation */
    FACILITY_COLP = 2;    /* Connected Line Identification Presentation */
    FACILITY_BAOC = 3;    /* Bar All Outgoing Calls */
    FACILITY_BAOIC = 4;   /* Bar All Outgoing International Calls */
    FACILITY_BAOICxH = 5; /* Bar all Outgoing International Calls except those
                           * directed to home PLMN country
                           */
    FACILITY_BAIC = 6;    /* Bar All Incoming Calls */
    FACILITY_BAICr = 7;   /* Bar All Incoming Calls when Roaming outside
                           * the home PLMN country
                           */
    FACILITY_BA_ALL = 8;  /* Bar All incoming & outgoing Calls */
    FACILITY_BA_MO = 9;   /* Bar All Outgoing Calls */
    FACILITY_BA_MT = 10;  /* Bar All Incming Calls */
    FACILITY_BS_MT = 11;  /* Bar Incoming Calls from specific DN */
    FACILITY_BAICa = 12;  /* Bar All Incoming Calls from Anonymous numbers*/
}

message SuppSvcRequest {
    optional fixed32 operationType = 1;  /* values are of type enum SuppSvcOperationType */
    optional fixed32 facilityType = 2;   /* values are of type enum SuppSvcFacilityType */
    optional CbNumListType cbNumListType = 3;
}

message SuppSvcResponse {
    optional ServiceClassStatus status = 1;
    optional fixed32 facilityType = 2; /* values are of type enum SuppSvcFacilityType */
    optional string failureCause = 3; /* Deprecated - see errorDetails field */
    repeated CbNumListType cbNumListType = 4; /* used by FACILITY_BS_MT for query operation */
    optional SipErrorInfo errorDetails = 5; /* SIP error details on failure */
}

 // List of quality values
enum Quality {
    LOW = 0; // Low Quality
    HIGH = 1; // High Quality
}

// Message contains call settings.
message VideoCallQuality {
    optional Quality quality = 1; // Video call quality
}

enum MwiMessageType {
    MWI_MSG_NONE = -1;
    MWI_MSG_VOICE = 0;
    MWI_MSG_VIDEO = 1;
    MWI_MSG_FAX   = 2;
    MWI_MSG_PAGER = 3;
    MWI_MSG_MULTIMEDIA = 4;
    MWI_MSG_TEXT = 5;
}

enum MwiPriority {
    MWI_MSG_PRIORITY_UNKNOWN = -1;
    MWI_MSG_PRIORITY_LOW     = 0;
    MWI_MSG_PRIORITY_NORMAL  = 1;
    MWI_MSG_PRIORITY_URGENT  = 2;
}

message MwiMessageSummary {
    optional MwiMessageType messageType = 1;
    optional fixed32 newMessage   = 2; /* Count for New Messages */
    optional fixed32 oldMessage  = 3;  /* Count for Old Messages */
    optional fixed32 newUrgent   = 4;  /* Count for New Urgent Messages */
    optional fixed32 oldUrgent   = 5;  /* Count for Old Urgent Messages */
}

message MwiMessageDetails {
    optional string toAddress = 1;
    optional string fromAddress = 2;
    optional string subject     = 3;
    optional string date        = 4;
    optional MwiPriority priority = 5;
    optional string messageId   = 6;
    optional MwiMessageType messageType = 7;
}

message Mwi {
    repeated MwiMessageSummary mwiMsgSummary = 1;
    optional string ueAddress = 2;
    repeated MwiMessageDetails mwiMsgDetail = 3;
}

message Hold {
    optional fixed32 callId = 1;
}

message Resume {
    optional fixed32 callId = 1;
}

message RtpStatisticsData {
    optional fixed32 count = 1; /* RTP count */
}

enum WifiCallingStatus {
   WIFI_NOT_SUPPORTED = 0;
   WIFI_STATUS_ON     = 1;
   WIFI_STATUS_OFF    = 2;
}

enum WifiCallingPreference {
    WIFI_PREF_NONE     = 0;
    WIFI_PREFERRED     = 1;
    WIFI_ONLY          = 2;
    CELLULAR_PREFERRED = 3;
    CELLULAR_ONLY      = 4;
}

message WifiCallingInfo {
   optional WifiCallingStatus status = 1;
   optional WifiCallingPreference preference = 2;
}

enum ConfigFailureCause {
     CONFIG_NO_ERR = 0;
     CONFIG_IMS_NOT_READY = 1;
     CONFIG_FILE_NOT_AVAILABLE = 2;
     CONFIG_READ_FAILED = 3;
     CONFIG_WRITE_FAILED = 4;
     CONFIG_OTHER_INTERNAL_ERR = 5;
}

enum ConfigItem {
    CONFIG_ITEM_NONE = 0;

    CONFIG_ITEM_VOCODER_AMRMODESET = 1; /* Value for this item is: (String)
                                         * String consisting of 0-7 seperated
                                         * by comma "," e.g., "1,5,7"
                                         * Reference for 0-7 values:
                                         * Values:
                                         *   - 0  -- 4.75 kbps
                                         *   - 1  -- 5.15 kbps
                                         *   - 2  -- 5.9 kbps
                                         *   - 3  -- 6.17 kbps
                                         *   - 4 -- 7.4 kbps
                                         *   - 5 -- 7.95 kbps
                                         *   - 6 -- 10.2 kbps
                                         *   - 7 -- 12.2 kbps
                                         * Spec reference: RFC 4867
                                         */

    CONFIG_ITEM_VOCODER_AMRWBMODESET = 2; /* Value for this Item is: (String)
                                           * String consisting of 0-8 seperated
                                           * by comma "," e.g., "2,6,8"
                                           * Reference for 0-8 values:
                                           * Values:
                                           *   - 0  -- 6.60 kbps
                                           *   - 1  -- 8.85 kbps
                                           *   - 2  -- 12.65 kbps
                                           *   - 3  -- 14.25 kbps
                                           *   - 4 -- 15.85 kbps
                                           *   - 5 -- 18.25 kbps
                                           *   - 6 -- 19.85 kbps
                                           *   - 7 -- 23.05 kbps
                                           *   - 8 -- 23.85 kbps
                                           * Spec reference: RFC 4867
                                           */

    CONFIG_ITEM_SIP_SESSION_TIMER = 3; /* Value for this item is: (Int)
                                        * SIP Session duration, in seconds
                                        */

    CONFIG_ITEM_MIN_SESSION_EXPIRY = 4; /* Value for this item is: (Int)
                                         * Minimum allowed value for session timer, in seconds
                                         */

    CONFIG_ITEM_CANCELLATION_TIMER = 5; /* Value for this item is: (Int)
                                         * SIP timer operator mode A, in seconds
                                         * Valid Range: 0 - 30
                                         * By default 6 seconds is used.
                                         */

    CONFIG_ITEM_T_DELAY = 6; /* Value for this item is: (Int)
                             * Ims Registration wait time when iRAT transitions from eHRPD to LTE,
                             * in seconds.
                             */

    CONFIG_ITEM_SILENT_REDIAL_ENABLE = 7; /* Value for this item is: (Int)
                                           * Flag that allows a device to silently redial over 1xRTT.
                                           * If this is not included in the request, a value of TRUE
                                           * (i.e., enabled) is used.
                                           * Value:
                                           *   - 0 -- Disable
                                           *   - 1 -- Enable
                                           */

    CONFIG_ITEM_SIP_T1_TIMER = 8; /* Value for this item is: (Int)
                                   * RTT estimate, in milliseconds.
                                   */

    CONFIG_ITEM_SIP_T2_TIMER = 9; /* Value for this item is: (Int)
                                   * Maximum retransmit interval, in milliseconds,
                                   * for non-invite requests
                                   * and invite responses.
                                   */

    CONFIG_ITEM_SIP_TF_TIMER = 10; /* Value for this item is: (Int)
                                    * Non-invite transaction timeout timer, in milliseconds.
                                    */

    CONFIG_ITEM_VLT_SETTING_ENABLED = 11; /* Value for this item is: (Int)
                                           * Enable VoLTE Support through Client Provisioning
                                           * Values:
                                           *   - 0 -- Disable
                                           *   - 1 -- Enable
                                           */

    CONFIG_ITEM_LVC_SETTING_ENABLED = 12; /* Value for this item is: (Int)
                                           * Enable VT Support through Client Provisioning
                                           * Values:
                                           *   - 0 -- Disable
                                           *   - 1 -- Enable
                                           */

    CONFIG_ITEM_DOMAIN_NAME = 13; /* Value for this item is: (String)
                                   * Ims Domain Name
                                   */

    CONFIG_ITEM_SMS_FORMAT = 14; /* Value for this item is: (Int)
                                  * Sms Format.
                                  * Values:
                                  *   - 0 -- 3GPP2
                                  *   - 1 -- 3GPP
                                  */

    CONFIG_ITEM_SMS_OVER_IP = 15; /* Value for this item is: (Int)
                                   * SMS over IP network indication flag
                                   * Values:
                                   *    - 0 -- Turn off MO SMS
                                   *    - 1 -- Turn on MO SMS
                                   */

    CONFIG_ITEM_PUBLISH_TIMER = 16; /* Value for this item is: (Int)
                                     * Publish timer, in seconds, when publish is sent on
                                     * an IMS network using 4G Radio access technology
                                     */

    CONFIG_ITEM_PUBLISH_TIMER_EXTENDED = 17; /* Value for this item is: (Int)
                                              * Publish extended timer, in seconds,
                                              * when publish is sent on an ims
                                              * network in non-4G RAT or
                                              * when in Airplane powerdown mode in a 4G RAT
                                              */

    CONFIG_ITEM_CAPABILITIES_CACHE_EXPIRATION = 18; /* Value for this item is: (Int)
                                                     * Duration of time, in seconds,
                                                     * for which the retrieved capability
                                                     * is considered valid
                                                     */

    CONFIG_ITEM_AVAILABILITY_CACHE_EXPIRATION = 19; /* Value for this item is: (Int)
                                                     * Duration of time, in seconds,
                                                     * for which the retrieved availability
                                                     * is considered valid
                                                     */

    CONFIG_ITEM_CAPABILITIES_POLL_INTERVAL = 20; /* Value for this item is: (Int)
                                                  * Duration of time, in seconds,
                                                  * between successive capability polling
                                                  */

    CONFIG_ITEM_SOURCE_THROTTLE_PUBLISH = 21; /* Value for this item is: (Int)
                                               * Duration, in seconds,
                                               * between successive publish requests
                                               */

    CONFIG_ITEM_MAX_NUM_ENTRIES_IN_RCL = 22; /* Value for this item is: (Int)
                                              * Maximum number of entries that
                                              * can be kept in the list subscription
                                              */

    CONFIG_ITEM_CAPAB_POLL_LIST_SUB_EXP = 23; /* Value for this item is: (Int)
                                               * Expiry timer value, in seconds,
                                               * for the list subscription req
                                               */

    CONFIG_ITEM_GZIP_FLAG = 24; /* Value for this item is: (Int)
                                 * Gzip compression enable flag
                                 * Values:
                                 *   - 0 -- Disable
                                 *   - 1 -- Enable
                                 */

    CONFIG_ITEM_EAB_SETTING_ENABLED = 25; /* Value for this item is: (Int)
                                           * Enable presence support through client provisioning
                                           * Values:
                                           *   - 0 -- Disable
                                           *   - 1 -- Enable
                                           */

    CONFIG_ITEM_MOBILE_DATA_ENABLED = 26; /* Value for this item is: (Int)
                                           * Mobile Data Status
                                           * Values:
                                           *   - 0 -- Disable
                                           *   - 1 -- Enable
                                           */

    CONFIG_ITEM_VOICE_OVER_WIFI_ENABLED = 27; /* Value for this item is: (int)
                                               * Wi-Fi Calling Status
                                               * Values:
                                               *   - 0 -- NOT_SUPPORTED
                                               *   - 1 -- WIFI_CALLING_ON
                                               *   - 2 -- WIFI_CALLING_OFF
                                               */

    CONFIG_ITEM_VOICE_OVER_WIFI_ROAMING = 28; /* Value for this item is: (Int)
                                               * Wi-Fi Call Roaming status.
                                               * Values:
                                               *   - 1 -- ROAMING_ENABLED
                                               *   - 0 -- ROAMING_DISABLED
                                               *
                                               * Note: Generic error will be returned
                                               * is the value is ROAMING_NOT_SUPPORTED
                                               */

    CONFIG_ITEM_VOICE_OVER_WIFI_MODE = 29; /* Value for this item is: (Int)
                                            * Wi-Fi Call Mode Preference
                                            * Values:
                                            *   - 0 -- WIFI_ONLY/WLAN_ONLY
                                            *   - 1 -- CELLULAR_PREFERRED
                                            *   - 2 -- WIFI_PREFERRED/WLAN_PREFERRED
                                            *
                                            * Note: Generic error will be returned
                                            * if the value is not any of the above.
                                            */

    CONFIG_ITEM_CAPABILITY_DISCOVERY_ENABLED = 30; /* Value for this item is: (Int)
                                                    * Flag indicating whether Discovery
                                                    * Capability is enabled
                                                    * Values:
                                                    *   - 0 -- Disable
                                                    *          Presence doesnot publish/subscribe
                                                    *          and ignores any notification received
                                                    *
                                                    *   - 1 -- Enable
                                                    *          Presence publishes/subscribes and
                                                    *          processes any notification received
                                                    *
                                                    * NOTE: Not supported currently
                                                    */

    CONFIG_ITEM_EMERGENCY_CALL_TIMER = 31; /* Value for this item is: (Int)
                                           * Emergenciy call timer
                                           *
                                           * NOTE: Not supported currently
                                           */

    CONFIG_ITEM_SSAC_HYSTERESIS_TIMER = 32; /* Value for this item is: (Int)
                                            * When UE moves from non-Voice area to Voice
                                            * area, the device shall start a hysteresis timer
                                            * and domain selection will not notify IMS about
                                            * voice preference until the expiry of hysteresis
                                            * timer
                                            *
                                            * NOTE: Not supported currently
                                            */

    CONFIG_ITEM_VOLTE_USER_OPT_IN_STATUS = 33; /* VoLTE user opted in status.
                                                * Value is in Integer format.
                                                * Opted-in (1) Opted-out (0).
                                                */

    CONFIG_ITEM_LBO_PCSCF_ADDRESS = 34; /* Proxy for Call Session Control Function(P-CSCF)
                                         * address for Local-BreakOut(LBO).
                                         * Value is in String format.
                                         */

    CONFIG_ITEM_KEEP_ALIVE_ENABLED = 35; /* Keep Alive Enabled for SIP.
                                          * Value is in Integer format. On(1), OFF(0).
                                          */

    CONFIG_ITEM_REGISTRATION_RETRY_BASE_TIME_SEC = 36; /* Registration retry Base Time value
                                                        * in seconds.
                                                        * Value is in Integer format.
                                                        */

    CONFIG_ITEM_REGISTRATION_RETRY_MAX_TIME_SEC = 37; /* Registration retry Max Time value
                                                       * in seconds.
                                                       * Value is in Integer format.
                                                       */

    CONFIG_ITEM_SPEECH_START_PORT = 38; /* Smallest RTP port for speech codec.
                                         * Value is in integer format.
                                         */

    CONFIG_ITEM_SPEECH_END_PORT = 39; /* Largest RTP port for speech code.
                                       * Value is in Integer format.
                                       */

    CONFIG_ITEM_SIP_INVITE_REQ_RETX_INTERVAL_MSEC = 40; /* SIP Timer A's value in msec.
                                                         * Timer A is the INVITE request
                                                         * retransmit interval, UDP only.
                                                         * Value is in Integer format.
                                                         */

    CONFIG_ITEM_SIP_INVITE_RSP_WAIT_TIME_MSEC = 41; /* SIP Timer B's value in msec.
                                                     * Timer B is the wait time for
                                                     * INVITE message to be acknowledged.
                                                     * Value is in Integer format.
                                                     */

    CONFIG_ITEM_SIP_INVITE_RSP_RETX_WAIT_TIME_MSEC = 42; /* SIP Timer D's value in msec.
                                                         * Timer D is the wait time for
                                                         * response retransmits of the
                                                         * invite client transactions.
                                                         * Value is in Integer format.
                                                         */

    CONFIG_ITEM_SIP_NON_INVITE_REQ_RETX_INTERVAL_MSEC = 43; /* SIP Timer E's value in msec.
                                                            * Timer E is the value
                                                            * Non-INVITE request
                                                            * retransmit interval, for
                                                            * UDP only.
                                                            * Value in Integer format.
                                                            */

    CONFIG_ITEM_SIP_NON_INVITE_TXN_TIMEOUT_TIMER_MSEC = 44; /* SIP Timer F's value in msec
                                                             * Timer F is the value of
                                                             * Non-INVITE transaction
                                                             * timeout timer.
                                                             * Value is in Integer format.
                                                             */

    CONFIG_ITEM_SIP_INVITE_RSP_RETX_INTERVAL_MSEC = 45; /* SIP Timer G's value in msec.
                                                         * Timer G is the value of INVITE
                                                         * response retransmit interval.
                                                         * Value is in Integer format.
                                                         */

    CONFIG_ITEM_SIP_ACK_RECEIPT_WAIT_TIME_MSEC = 46; /* SIP Timer H's value in msec.
                                                      * Timer H is value of wait time
                                                      * for ACK receipt.
                                                      * Value is in Integer format.
                                                      */

    CONFIG_ITEM_SIP_ACK_RETX_WAIT_TIME_MSEC = 47; /* SIP Timer I's value in msec.
                                                   * Timer I is value of wait time for
                                                   * ACK retransmits.
                                                   * Value is in Integer format.
                                                   */

    CONFIG_ITEM_SIP_NON_INVITE_REQ_RETX_WAIT_TIME_MSEC = 48; /* SIP Timer J's value in
                                                              * msec. Timer J is the
                                                              * value of wait time for
                                                              * non-invite request
                                                              * retransmission.
                                                              * Value is in Integer
                                                              * format.
                                                              */

    CONFIG_ITEM_SIP_NON_INVITE_RSP_RETX_WAIT_TIME_MSEC = 49; /* SIP Timer K's value in
                                                              * msec. Timer K is the
                                                              * value of wait time for
                                                              * non-invite response
                                                              * retransmits.
                                                              * Value is in Integer
                                                              * format.
                                                              */

    CONFIG_ITEM_AMR_WB_OCTET_ALIGNED_PT = 50; /* AMR WB octet aligned dynamic payload
                                               * type.
                                               * Value is in Integer format.
                                               */

    CONFIG_ITEM_AMR_WB_BANDWIDTH_EFFICIENT_PT = 51; /* AMR WB bandwidth efficient
                                                     * payload type.
                                                     * Value is in Integer format.
                                                     */

    CONFIG_ITEM_AMR_OCTET_ALIGNED_PT = 52; /* AMR octet aligned dynamic payload type.
                                            * Value is in Integer format.
                                            */

    CONFIG_ITEM_AMR_BANDWIDTH_EFFICIENT_PT = 53; /* AMR bandwidth efficient payload
                                                  * type.
                                                  * Value is in Integer format.
                                                  */

    CONFIG_ITEM_DTMF_WB_PT = 54; /* DTMF WB payload type.
                                  * Value is in Integer format.
                                  */

    CONFIG_ITEM_DTMF_NB_PT = 55; /* DTMF NB payload type.
                                  * Value is in Integer format.
                                  */

    CONFIG_ITEM_AMR_DEFAULT_MODE = 56; /* AMR Default encoding mode.
                                        * Value is in Integer format.
                                        */

    CONFIG_ITEM_SMS_PSI = 57; /* SMS Public Service Identity.
                               * Value is in String format.
                               */

    CONFIG_ITEM_VIDEO_QUALITY = 58; /* Value for this item is: (Int)
                                     * Video Quality values are
                                     *  - 0 -- Low Quality
                                     *  - 1 -- High Quality
                                     */

    CONFIG_ITEM_THRESHOLD_LTE1 = 59; /* Value for this item is: (Int)
                                      * Threshold for LTE to WiFi Handover
                                      */

    CONFIG_ITEM_THRESHOLD_LTE2 = 60; /* Value for this item is: (Int)
                                      * Threshold for WiFi to LTE Handover
                                      */

    CONFIG_ITEM_THRESHOLD_LTE3 = 61; /* Value for this item is: (Int)
                                      * Threshold for LTE to WiFi Handover
                                      * and WiFi to LTE Handover
                                      */

    CONFIG_ITEM_THRESHOLD_1x = 62; /* Value for this item is: (Int)
                                      * 1x Threshold value for comparing
                                      * averaged signal strength.
                                      */

    CONFIG_ITEM_THRESHOLD_WIFI_A = 63; /* Value for this item is: (Int)
                                      * Threshold for LTE to WiFi Handover
                                      */

    CONFIG_ITEM_THRESHOLD_WIFI_B = 64; /* Value for this item is: (Int)
                                      * Threshold for WiFi to LTE Handover
                                      */

    CONFIG_ITEM_T_EPDG_LTE = 65; /* Value for this item is: (Int)
                                  * Ims handover hysteresis timer for
                                  * WLAN to WWAN in seconds.
                                  */

    CONFIG_ITEM_T_EPDG_WIFI = 66; /* Value for this item is: (Int)
                                  * Ims handover hysteresis timer for
                                  * WWAN to WLAN in seconds.
                                  */

    CONFIG_ITEM_T_EPDG_1x = 67; /* Value for this item is: (Int)
                                  * Ims handover hysteresis timer for
                                  * WLAN to 1x in seconds.
                                  */

    CONFIG_ITEM_VWF_SETTING_ENABLED = 68; /* Value for this item is: (Int)
                                          * Enable VoWiFi through client
                                          * provisioning.
                                          * Values
                                          *   - 0 -- DISABLED
                                          *   - 1 -- ENABLED
                                          */

    CONFIG_ITEM_VCE_SETTING_ENABLED = 69; /* Value for this item is: (Int)
                                          * Enable VICE through client
                                          * provisioning.
                                          * Values
                                          *   - 0 -- DISABLED
                                          *   - 1 -- ENABLED
                                          */
}

/* This message is a common structure used for
 * Setting or Getting Config items
 * Message id's used with this message are
 *
 * 1. REQUEST_SET_IMS_CONFIG: To set config item
 *
 *     Request: Should contain only the following
 *               1. "item"
 *               2. "intValue"/"StringValue" - Depending on the item
 *     Response: May contain two fields or one
 *               1. "item"
 *               2. "errorCause" - If there is any error in setting the value
 *
 * 2. REQUEST_GET_IMS_CONFIG: To get value of the Config item
 *
 *     Request: Should only contain "item" (to get the value of)
 *
 *     Response: May contain the following
 *               1. "item"
 *               2. "intValue"/"stringValue" - Depending on the item
 *               3. "errorCause" - If there was any error getting the value
 *
 * Note: Out of three values int/bool/string Value. Only one of them needs to be
 *       used, rest should have has_xxx value set to FALSE.
 */
message ConfigMsg {
    optional ConfigItem item = 1; /* Determines the Config */

    optional bool boolValue = 2; /* Value of the Boolean ConfigItem */

    optional fixed32 intValue = 3; /* Value of the Integer ConfigItem */

    optional string stringValue = 4; /* Value of the String ConfigItem */

    optional ConfigFailureCause errorCause = 5;
}

message ViceInfo{
    optional bytes vice_info_uri = 1; /* XML for Dialog Event Package
                                       * as per RFC 4235
                                       */
}

/* This message is used by:
 *
 * 1. UNSOL_REQUEST_GEOLOCATION to provide the latitude and longitude.
 *
 * 2. REQUEST_SEND_GEOLOCATION_INFO to send the Address information
 *    list corresponding to the latitude and longitude provided. The
 *    latitude and longitude values are passed back to lower layers as
 *    part of this request.
 *    The address information can be null if the HLOS location services
 *    APIs do not provide this information.
 *
 */
message GeoLocationInfo {
    optional double lat = 1; /* Latitude */

    optional double lon = 2; /* Longitude */

    optional AddressInfo addressInfo = 3;
}

message AddressInfo {
    optional string city = 1;

    optional string state = 2;

    optional string country = 3;

    optional string postalCode = 4;

    optional string countryCode = 5;
}

enum EctType {
   BLIND_TRANSFER        = 0; /* Transfer the call without establishing a session with
                                 the transfer target */
   ASSURED_TRANSFER      = 1; /* Same as blind transfer, except Transferer waits for
                                 session establishment between Transferee and Transfer target
                                 for releasing the Transferer-Transferee call */
   CONSULTATIVE_TRANSFER = 2; /* Call with transfer target is established before initiating
                                 call transfer, and required to pass the call id of the call
                                 with Transfer target */
}

message ExplicitCallTransfer {
   optional fixed32 callId        = 1;  /* Active call id to be transferred;
                                           Mandatory parameter */
   optional EctType ectType       = 2;  /* Explicit Call Transfer type;
                                           Mandatory parameter */
   optional string  targetAddress = 3;  /* Transfer Target address;
                                           Mandatory for Blind and Assured transfer */
   optional fixed32 targetCallId  = 4;  /* Transfer Target call id;
                                           Mandatory for Consultative transfer */
}

enum voWiFiQuality {
    VOWIFI_QUALITY_NONE      = 0;
    VOWIFI_QUALITY_EXCELLENT = 1; /* VoWiFI quality is excellent */
    VOWIFI_QUALITY_FAIR      = 2; /* VoWiFI quality is fair */
    VOWIFI_QUALITY_BAD       = 4; /* VoWiFI quality is bad */
}

message VoWiFiCallQuality {
   optional voWiFiQuality quality = 1; /* Current active voWiFI call quality */
}

/*
 * Message sent as response for REQUEST_GET_SSAC_INFO and UNSOL_SSAC_CHANGED
 * As per 3GPP TS 36.331, Range for
 * barring factor - 0 to 100. Value 100 is used when the UE goes to the LTE Connected state.
 *                  Value 0xFF indicates Invalid.
 * barring time(in seconds) -  0 to 512. Value 0 is used when the UE goes to the LTE
 *                  Connected state. Value 0xFFFF indicates invalid
 *
 */
message SsacInfo {
   optional fixed32 barringFactorVoice = 1;     /* For Voice calls */
   optional fixed32 barringTimeVoice = 2;       /* For Voice calls */
   optional fixed32 barringFactorVideo = 3;     /* For Video calls */
   optional fixed32 barringTimeVideo = 4;       /* For Video calls */
   optional fixed32 barringFactorVoiceSib = 5;  /* For Voice calls.
                                                   Factor received from the SIB2 RRC message */
   optional fixed32 barringTimeVoiceSib = 6;    /* For Voice calls.
                                                   Barring time received from the SIB2 RRC message*/
   optional fixed32 barringFactorVideoSib = 7;  /* For Video calls.
                                                   Factor received from the SIB2 RRC message */
   optional fixed32 barringTimeVideoSib = 8;    /* For Video calls.
                                                   Barring time received from the SIB2 RRC message*/
}

message VopsInfo {
   optional bool isVopsEnabled = 1;
}

enum ConfParticipantOperation {
    ADD    = 0;
    REMOVE = 1;
}

message ParticipantStatusInfo {
    optional fixed32                  callId = 1;         /* Call id */
    optional ConfParticipantOperation operation = 2;      /* Operation of conference participant */
    optional fixed32                  sipStatus = 3;      /* sip error code as defined in RFC3261 */
    optional string                   participantUri = 4; /* Participant URI */
    optional bool                     isEct = 5;          /* is explicit call transfer */
}

enum VoltePref {
    VOLTE_PREF_DISABLED = 0; /* VoLTE preference is disabled */
    VOLTE_PREF_ENABLED  = 1; /* VoLTE preference is enabled */
    VOLTE_PREF_UNKNOWN  = 2; /* VoLTE preference is not known */
}

/*
 * Message sent as
 *  - request's data for REQUEST_SET_VOLTE_PREF
 *  - response for REQUEST_GET_VOLTE_PREF
 */
message VolteUserPref {
   optional VoltePref mode = 1;
}

enum HandoverConfig {
    HO_ENABLED_ALL               = 1;   /* Handover is enabled from
                                           WWAN to WLAN and WLAN to WWAN */
    HO_DISABLED_ALL              = 2;   /* Handover is disabled from
                                           WWAN to WLAN and WLAN to WWAN */
    HO_ENABLED_WLAN_TO_WWAN_ONLY = 3;   /* Handover is only enabled from
                                           WLAN to WWAN */
    HO_ENABLED_WWAN_TO_WLAN_ONLY = 4;   /* Handover is only enabled from
                                           WWAN to WLAN */
}

message HandoverConfigMsg {
   optional HandoverConfig hoConfig = 1; /* Value of the handover config */
}

message SipErrorInfo {
    optional fixed32 sipErrorCode = 1; /* SIP error code returned by network */
    optional string sipErrorString = 2; /* SIP error string returned by network */
}
